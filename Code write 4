import pandas as pd
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from datetime import datetime

# === CONFIGURATION ===
output_file = "control_results_Extraction_2.xlsx"
colonnes_titres = ["ID_TITRE", "DESCRIPTION", "NATURE", "TIERS_EMETTEUR", "DATE_ECHEANCE", "DATE_EMISSION"]

# === CHARGEMENT DU CLASSEUR EXISTANT ===
wb = load_workbook(output_file)

for col in colonnes_titres:
    # === CONSTRUCTION DU DATAFRAME SELON LA COLONNE ===
    if col == "ID_TITRE":
        df_result = pd.DataFrame({
            "ID_TITRE": df_Titres[col],
            "RITREQ.1.c1": results_completed[col],
            "RITREQ.2.c1": results_unicite_id_titre,
            "RITREQ.2.c2": results_coherence_id_titre,
            "RITREQ.2.c3": results_coherence2_id_titre,
            "DATE_EXTRACTION": date_Extraction
        })

    elif col == "DESCRIPTION":
        df_result = pd.DataFrame({
            "ID_TITRE": df_Titres["ID_TITRE"],
            "DESCRIPTION": df_Titres[col],
            "RITREQ.1.c1": results_completed[col],
            "RITREQ.3.c1": results_coherence_description,
            "DATE_EXTRACTION": date_Extraction
        })

    elif col == "NATURE":
        df_result = pd.DataFrame({
            "ID_TITRE": df_Titres["ID_TITRE"],
            "NATURE": df_Titres[col],
            "RITREQ.1.c1": results_completed[col],
            "RITREQ.3.c1": results_coherence_nature,
            "RITREQ.3.c2": results_coherence2_nature,
            "DATE_EXTRACTION": date_Extraction
        })

    elif col == "TIERS_EMETTEUR":
        df_result = pd.DataFrame({
            "ID_TITRE": df_Titres["ID_TITRE"],
            "TIERS_EMETTEUR": df_Titres[col],
            "RITREQ.1.c1": results_completed[col],
            "RITREQ.3.c1": results_coherence_emetteur,
            "DATE_EXTRACTION": date_Extraction
        })

    elif col == "DATE_ECHEANCE":
        df_result = pd.DataFrame({
            "ID_TITRE": df_Titres["ID_TITRE"],
            "DATE_ECHEANCE": df_Titres[col],
            "RITREQ.1.c1": results_completed[col],
            "RITREQ.5.v.1": results_validite_1_date_echeance,
            "RITREQ.5.v.2": results_validite_2_date_echeance,
            "RITREQ.5.c.1": results_coherence_date_echeance,
            "DATE_EXTRACTION": date_Extraction
        })

    elif col == "DATE_EMISSION":
        df_result = pd.DataFrame({
            "ID_TITRE": df_Titres["ID_TITRE"],
            "DATE_EMISSION": df_Titres[col],
            "RITREQ.1.c1": results_completed[col],
            "RITREQ.5.v.1": results_validite_1_date_emission,
            "RITREQ.5.v.2": results_validite_2_date_emission,
            "RITREQ.5.c.1": results_coherence_date_emission,
            "DATE_EXTRACTION": date_Extraction
        })

    else:
        continue  # Ignorer les colonnes non prises en charge

    # === SÃ‰LECTION OU CRÃ‰ATION DE LA FEUILLE ===
    if col in wb.sheetnames:
        ws = wb[col]
        start_row = ws.max_row + 1
    else:
        ws = wb.create_sheet(title=col)
        start_row = 1
        # Si nouvelle feuille, ajouter lâ€™en-tÃªte manuellement
        for r_idx, row in enumerate(dataframe_to_rows(df_result.head(0), index=False, header=True), start=1):
            for c_idx, value in enumerate(row, start=1):
                ws.cell(row=r_idx, column=c_idx, value=value)
        start_row = 2

    # === CONVERSION DES DONNÃ‰ES & INSERTION Ã€ PARTIR DE LA PREMIÃˆRE LIGNE VIDE ===
    for r_idx, row in enumerate(dataframe_to_rows(df_result, index=False, header=False), start=start_row):
        for c_idx, value in enumerate(row, start=1):
            ws.cell(row=r_idx, column=c_idx, value=value)

# === SAUVEGARDE DU FICHIER ===
wb.save(output_file)

# === SAUVEGARDE DE SÃ‰CURITÃ‰ ===
backup_file = f"control_results_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
wb.save(backup_file)

print(f"âœ… RÃ©sultats ajoutÃ©s avec succÃ¨s.\nðŸ’¾ Sauvegarde crÃ©Ã©e : {backup_file}")
